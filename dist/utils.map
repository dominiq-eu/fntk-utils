{"version":3,"sources":["utils.js"],"names":["RandomBetween","min","max","Math","floor","random","Random","list","length","Let","index","randomBetween","In","Pipe","x","then","fn","f","vars","curry","a","b","undefined","doLog","name","msg","cat","toLowerCase","Log","txt","module","exports"],"mappings":";AAWA,IAAMA,EAAgB,SAACC,EAAKC,GACxBC,OAAAA,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,IAAMA,GAG5CK,EAAS,WAACC,IAAAA,EAAO,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,MACnBA,OAAAA,EAAKC,OAAS,EACRC,GAAMC,MAAOC,cAAc,EAAGJ,EAAKC,OAAS,KAAMI,GAC9C,SAAA,GAAGF,IAAAA,EAAAA,EAAAA,MAAYH,OAAAA,EAAKG,KAExBC,cAAc,EAAG,MAMrBE,EAAO,SAAPA,EAAO,GAAM,OACN,QAAA,SAAA,GAAOC,OAAAA,EAAEC,KAAOF,EAAKC,EAAEC,KAAKC,IAAOH,EAAKG,EAAGF,KAC7C,MAAA,WAAMA,OAAAA,KAGXL,EAAM,SAAA,GAAS,OACb,GAAA,SAAA,GAAKQ,OAAAA,EAAEC,MAOTC,EAAQ,SAAA,GAAK,OAAA,SAACC,EAAGC,GAAOA,YAAMC,IAAND,EAAkB,SAAA,GAAKJ,OAAAA,EAAEG,EAAGC,IAAKJ,EAAEG,EAAGC,KAC9DE,EAAQ,SAACC,EAAMC,EAAKX,GAChBY,IAAAA,EAAMF,EAAKG,cAEVb,OADCY,QAAAA,GAASF,IAAAA,EAASC,KAAAA,EAAOX,GAC1BA,GAELc,EAAM,SAAA,GAAQ,OACTT,MAAAA,EAAM,SAACU,EAAKf,GAAMS,OAAAA,EAAM,QAAaE,IAAAA,EAASI,MAAAA,EAAQf,IAAAA,KACtDK,MAAAA,EAAM,SAACU,EAAKf,GAAMS,OAAAA,EAAM,QAAaE,IAAAA,EAASI,MAAAA,EAAQf,IAAAA,OAIjEgB,OAAOC,SAAU,OAAA,EAAA,cAAA,EAAA,KAAA,EAAA,IAAA,EAQbH,IAAAA","file":"utils.map","sourceRoot":"../src","sourcesContent":["/*\n    utils.js\n\n\n*/\n\n//\n// -- Helper --\n//\n\n// RandomBetween :: Int -> Int -> Int\nconst RandomBetween = (min, max) =>\n    Math.floor(Math.random() * (max - min + 1)) + min\n\n// Random :: List a -> a | Int\nconst Random = (list = []) =>\n    list.length > 0\n        ? Let({ index: randomBetween(0, list.length - 1) }).In(\n              ({ index }) => list[index]\n          )\n        : randomBetween(1, 100)\n\n//\n// -- Structures --\n//\n\nconst Pipe = x => ({\n    andThen: fn => (x.then ? Pipe(x.then(fn)) : Pipe(fn(x))),\n    value: () => x\n})\n\nconst Let = vars => ({\n    In: f => f(vars)\n})\n\n//\n// -- Logging --\n//\n\nconst curry = f => (a, b) => (b === undefined ? b => f(a, b) : f(a, b))\nconst doLog = (name, msg, x) => {\n    const cat = name.toLowerCase()\n    console[cat](`[${name}] ${msg}`, x) // eslint-disable-line\n    return x\n}\nconst Log = msg => ({\n    debug: curry((txt, x) => doLog('Debug', `[${msg}] [${txt}]`, x)),\n    error: curry((txt, x) => doLog('Error', `[${msg}] [${txt}]`, x))\n})\n\n// Module Api\nmodule.exports = {\n    // Helper\n    Random,\n    RandomBetween,\n\n    // Structures\n    Pipe,\n    Let,\n    Log\n}\n"]}