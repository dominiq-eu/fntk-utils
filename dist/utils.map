{"version":3,"sources":["utils.js"],"names":["RandomBetween","min","max","Math","floor","random","Random","list","length","Let","index","In","randomBetween","Pipe","andThen","x","then","fn","value","f","vars","curry","a","b","undefined","doLog","name","msg","cat","toLowerCase","console","Log","debug","txt","error","module","exports"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;AAMA;AACA;AACA;;AAEA;AACA,IAAMA,gBAAgB,SAAhBA,aAAgB,CAACC,GAAD,EAAMC,GAAN;AAAA,WAClBC,KAAKC,KAAL,CAAWD,KAAKE,MAAL,MAAiBH,MAAMD,GAAN,GAAY,CAA7B,CAAX,IAA8CA,GAD5B;AAAA,CAAtB;;AAGA;AACA,IAAMK,SAAS,SAATA,MAAS;AAAA,QAACC,IAAD,uEAAQ,EAAR;AAAA,WACXA,KAAKC,MAAL,GAAc,CAAd,GACMC,IAAI,EAAEC,OAAOV,cAAc,CAAd,EAAiBO,KAAKC,MAAL,GAAc,CAA/B,CAAT,EAAJ,EAAkDG,EAAlD,CACI;AAAA,YAAGD,KAAH,QAAGA,KAAH;AAAA,eAAeH,KAAKG,KAAL,CAAf;AAAA,KADJ,CADN,GAIME,cAAc,CAAd,EAAiB,GAAjB,CALK;AAAA,CAAf;;AAOA;AACA;AACA;;AAEA,IAAMC,OAAO,SAAPA,IAAO;AAAA,WAAM;AACfC,iBAAS;AAAA,mBAAOC,EAAEC,IAAF,GAASH,KAAKE,EAAEC,IAAF,CAAOC,EAAP,CAAL,CAAT,GAA4BJ,KAAKI,GAAGF,CAAH,CAAL,CAAnC;AAAA,SADM;AAEfG,eAAO;AAAA,mBAAMH,CAAN;AAAA;AAFQ,KAAN;AAAA,CAAb;;AAKA,IAAMN,MAAM,SAANA,GAAM;AAAA,WAAS;AACjBE,YAAI;AAAA,mBAAKQ,EAAEC,IAAF,CAAL;AAAA;AADa,KAAT;AAAA,CAAZ;;AAIA;AACA;AACA;;AAEA,IAAMC,QAAQ,SAARA,KAAQ;AAAA,WAAK,UAACC,CAAD,EAAIC,CAAJ;AAAA,eAAWA,MAAMC,SAAN,GAAkB;AAAA,mBAAKL,EAAEG,CAAF,EAAKC,CAAL,CAAL;AAAA,SAAlB,GAAiCJ,EAAEG,CAAF,EAAKC,CAAL,CAA5C;AAAA,KAAL;AAAA,CAAd;AACA,IAAME,QAAQ,SAARA,KAAQ,CAACC,IAAD,EAAOC,GAAP,EAAYZ,CAAZ,EAAkB;AAC5B,QAAMa,MAAMF,KAAKG,WAAL,EAAZ;AACAC,YAAQF,GAAR,QAAiBF,IAAjB,UAA0BC,GAA1B,EAAiCZ,CAAjC,EAF4B,CAEQ;AACpC,WAAOA,CAAP;AACH,CAJD;AAKA,IAAMgB,MAAM,SAANA,GAAM;AAAA,WAAQ;AAChBC,eAAOX,MAAM,UAACY,GAAD,EAAMlB,CAAN;AAAA,mBAAYU,MAAM,OAAN,QAAmBE,GAAnB,WAA4BM,GAA5B,QAAoClB,CAApC,CAAZ;AAAA,SAAN,CADS;AAEhBmB,eAAOb,MAAM,UAACY,GAAD,EAAMlB,CAAN;AAAA,mBAAYU,MAAM,OAAN,QAAmBE,GAAnB,WAA4BM,GAA5B,QAAoClB,CAApC,CAAZ;AAAA,SAAN;AAFS,KAAR;AAAA,CAAZ;;AAKA;AACAoB,OAAOC,OAAP,GAAiB;AACb;AACA9B,kBAFa;AAGbN,gCAHa;;AAKb;AACAa,cANa;AAObJ,YAPa;AAQbsB;AARa,CAAjB","file":"utils.map","sourceRoot":"../src","sourcesContent":["/*\n    utils.js\n\n\n*/\n\n//\n// -- Helper --\n//\n\n// RandomBetween :: Int -> Int -> Int\nconst RandomBetween = (min, max) =>\n    Math.floor(Math.random() * (max - min + 1)) + min\n\n// Random :: List a -> a | Int\nconst Random = (list = []) =>\n    list.length > 0\n        ? Let({ index: RandomBetween(0, list.length - 1) }).In(\n              ({ index }) => list[index]\n          )\n        : randomBetween(1, 100)\n\n//\n// -- Structures --\n//\n\nconst Pipe = x => ({\n    andThen: fn => (x.then ? Pipe(x.then(fn)) : Pipe(fn(x))),\n    value: () => x\n})\n\nconst Let = vars => ({\n    In: f => f(vars)\n})\n\n//\n// -- Logging --\n//\n\nconst curry = f => (a, b) => (b === undefined ? b => f(a, b) : f(a, b))\nconst doLog = (name, msg, x) => {\n    const cat = name.toLowerCase()\n    console[cat](`[${name}] ${msg}`, x) // eslint-disable-line\n    return x\n}\nconst Log = msg => ({\n    debug: curry((txt, x) => doLog('Debug', `[${msg}] [${txt}]`, x)),\n    error: curry((txt, x) => doLog('Error', `[${msg}] [${txt}]`, x))\n})\n\n// Module Api\nmodule.exports = {\n    // Helper\n    Random,\n    RandomBetween,\n\n    // Structures\n    Pipe,\n    Let,\n    Log\n}\n"]}